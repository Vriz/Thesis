__author__ = 'vriz'
# !/usr/bin/env python
# -*-coding: utf-8-*-
"""This module takes node-SQL table creates a copy of it an then changes the visibility of certain nodes
based on on the users preferences"""

import pyodbc


class Connect:
    """ Connects us to the database """
    def __init__(self, nodes):
        """ Connects us to the database and and assigns the node table to the appropriate variable """
        self.cnxn = pyodbc.connect('Trusted_Connection=yes', driver = '{SQL Server}', server = 'localhost', database = 'PracticeCopy')
        self.nodes = nodes


class ChangeVisibility:
    """ Takes an SQL table creates an exact copy and then changes the visibility of certain nodes based on on on the
     users preferences """

    def __init__(self, nodes, cnxn, new_table, choice):
        self.nodes = nodes
        self.cnxn = cnxn
        self.new_table = new_table
        self.choice = choice
        self.cursor = self.cnxn.cursor()
        if self.choice == '1':
            # Create the new table
            self.create_sql_table()
            # Change the visibility by class
            self.change_visibility_by_class(raw_input("Which class of nodes you want to have their visilbility changed? :"))
        elif self.choice == '2':
            # Create the new table
            self.create_sql_table()
            self.cond = True
            # Create a list with the ids of the nodes that the used wants to have their visibility changed
            self.list_to_change = self.nodes_to_change(self.cond)
            # Change the visibility by id
            self.change_visibility_by_id(self.list_to_change)
        else:
            print "Wrong choice...Restart application and try again!!!"

    def create_sql_table(self):
        """ This method creates an exact copy on an SQL table """

        # First lets create the new table
        self.cursor.execute("CREATE TABLE dbo."+self.new_table+" (FID int, ID int, VISIBILITY int, CLASS int, JUNCTION int)")
        # Inform the database so that we can see the changes in the management studio
        self.cnxn.commit()
        # Select all the columns
        self.cursor.execute("SELECT * FROM dbo."+self.nodes+" ORDER BY FID ASC")
        # Get all the rows of the table
        rows = self.cursor.fetchall()
        # For every row:
        for part in rows:
            # Pass the values to the new table
            self.cursor.execute("INSERT INTO dbo."+self.new_table+" VALUES("+str(part[0]) + ', '+str(part[1]) + ', '+str(part[2]) + ', '+str(part[3]) + ', '+str(part[4]) +")")
            # Inform the database
            self.cnxn.commit()

    def change_visibility_by_class(self, cls):
        """ This method changes the visibility of certain nodes based on their class """

        self.cursor.execute("UPDATE dbo."+self.new_table+" SET VISIBILITY=? WHERE CLASS=?", (0, cls,))
        self.cnxn.commit()

    def nodes_to_change(self, condition):
        """This metgod creates a list with all the Ids of the nodes that
        the user wants to have their visibility changed
        @Param condition is boolean variable set to True
        @Return is a list that contains the Ids of the nodes"""

        # Create an empty list
        temp_list = []
        # As long as condition == True
        while condition:
            # Promt the user to give us the id of the nodes he wants their visibility to be changed or to end the process
            temp_id = raw_input("Please type the id of the node or type End to continue! :")
            # If the users does not want the process to end
            if temp_id != 'End':
                # Get the integer of the users input
                ids = int(temp_id)
                # Append the list with tha id
                temp_list.append(ids)
            # If the user types 'End'
            else:
                condition = False
        return temp_list

    def change_visibility_by_id(self, list_0):
        """This method takes a list of ids and sets the visibility of those nodes to zero
        @Param list_0 is the list with the ids"""

        # For each id in the list
        for node in list_0:
            self.cursor.execute("UPDATE dbo."+self.new_table+" SET VISIBILITY=? WHERE ID=?", (0, node,))
            self.cnxn.commit()


def main():
    # Create a connection to the database and the desired tables
    connection = Connect(raw_input('Type the name of the Node table: ').upper())
    # Changes the visibility of certain nodes
    ChangeVisibility(connection.nodes, connection.cnxn, raw_input("Please type the name of the new table...:"), raw_input("If you want to change visibility by class press 1...If you want to change visibility by ID press 2..."))

if __name__ == '__main__':
    main()
